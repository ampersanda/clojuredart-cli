(ns cljds.core
  (:require ["dart:io" :refer [exit Process]]
            ["package:http/http.dart" :as http]
            [clojure.string :as string]
            [cljds.templates :refer [edn-tpl main-tpl]]
            [cljds.utils.std :refer [>> !!]]
            [cljds.utils.io :as io]
            [cljds.consts :refer [docs-url sha-url]]))

(defn make-files [sha project-name full-ns]
  (let [dir       (await (io/mkdir project-name))]
    (>> (str "Creating \"" (.-path dir) "\" project"))

    ;; initialize deps.edn
    (let [edn-file  (await (io/mkfile (str project-name "/deps.edn")))
          content   (string/replace edn-tpl #"CLJD_SHA" sha)]
      (await (.writeAsString edn-file content)))

    ;; add main file
    (let [main-file (await
                     (io/mkfile (str project-name "/src/" project-name "/core.cljd") :recursive true))
          content   (string/replace main-tpl #"NAMESPACE" full-ns)]
      (await (.writeAsString main-file content)))

    ;; clj -M -m cljd.build init --dart namespace
    (>> (str "Running clj -M -m cljd.build init --dart " full-ns))

    (let [result (await (.run Process "clj" ["-M" "-m" "cljd.build" "init" "--dart" full-ns] .workingDirectory project-name))]
      (>> (.-stdout result))
      (!! (.-stderr result)))

    ;; creating src dirs
    (await (io/mkdir (str project-name "/src/" project-name) :recursive true))))

(defn latest-sha
  "Getting available latest SHA from ClojureDart repository"
  []
  (try
    (let [sha-url      (.parse Uri sha-url)
          client       (http/Client)
          content      (await (.get client sha-url))
          status-code  (.-statusCode content)]

      (>> (str "Getting latest version from " (.toString sha-url)))

      (if (= status-code 200)
        (let [result (filter (fn [e] (seq e)) (string/split-lines (.-body content)))
              latest (last result)]
          (>> (str "Using " latest))
          latest)
        (>> "Failed getting latest")))
    (catch
     #_{:clj-kondo/ignore [:unresolved-symbol]}
     dynamic e
     (!! (str "Failed getting latest sha -> " e)))))

(defn dart-gen
  "Generate plain-dart project -> https://github.com/Tensegritics/ClojureDart/blob/main/doc/quick-start.md"
  [namespace]
  (let [first-ns     (nth namespace 1)
        full-ns      (str first-ns ".core")
        sha (await (latest-sha))]
    (await (make-files sha first-ns full-ns))
    (>> (str "Project " full-ns " created successfully! \n"))
    (>>
     (str "To run \n\n$ cd " first-ns " && clj -M -m cljd.build compile && dart run bin/" first-ns ".dart" "\n"))
    (>> (str "Read more " docs-url))
    (exit 0)))

(defn main [arguments]
  (when (nil? (seq arguments))
    (!! "Project name is required. e.g. cljds projectname")
    (exit 2))

  (let [ns-result    (re-find #"([A-Za-z]+)" (first arguments))
        valid-ns?    (not (nil? ns-result))]

    (if valid-ns?
      (dart-gen ns-result)
      (do
        (!! "Wrong namespace format. e.g. cljds projectname")
        (exit 2)))))
