(ns cljds.core
  (:require
    [cljds.utils.log :refer [err logger]]
    [cljds.generators.dart :as dart]
    [cljds.generators.flutter :as flutter]
    [cljds.utils.names :as names]))

(defn select-type []
  (.chooseOne logger "Select project type:" .choices ["Dart" "Flutter"]))

(defn input-name []
  (let [prompt (.prompt logger "Project name:" .defaultValue "hello_world")]
    (if (names/valid? prompt)
      prompt
      (do
        (err "Invalid project name! Only alphabet, underscore and dash are allowed.")
        (input-name)))))

(defn generate [type project-name]
  (condp = type
    :dart (dart/generate project-name)
    :flutter (flutter/generate project-name)
    (do
      (err (str "Project type '" (name type) "' is not available."))
      (let [type (-> (select-type)
                     clojure.string/lower-case
                     keyword)
            name (input-name)]
        (generate type name)))))

(defn main [arguments]
  (if
    ;; when no commands provided
    (nil? (seq arguments))
    (let [type (-> (select-type)
                   clojure.string/lower-case
                   keyword)
          project-name (input-name)]
      (generate type project-name))
    ;; proceed directly
    (let [[type project-name] arguments]
      (generate (keyword type) project-name))))
