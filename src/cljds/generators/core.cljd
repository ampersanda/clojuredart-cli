(ns cljds.generators.core
  (:require
    ["dart:io" :refer [exit]]
    [cljds.utils.names :refer [names]]
    [cljds.consts :refer [sha-url]]
    [clojure.string :as string]
    [cljds.utils.log :refer [info err logger]]
    ["package:http/http.dart" :as http]))

(defn latest-sha
  "Getting available latest SHA from ClojureDart repository"
  []

  (let [loading (.progress logger (str "Getting latest version from " (.toString sha-url)))]
    (try
      (let [client (http/Client)
            content (await (.get client sha-url))
            status-code (.-statusCode content)]

        (if (= status-code 200)
          (let [result (filter (fn [e] (seq e)) (string/split-lines (.-body content)))
                latest (last result)]

            (.complete loading (str "Using " latest))
            latest)
          (throw (Exception.))))
      (catch
        #_{:clj-kondo/ignore [:unresolved-symbol]}
        dynamic e
        (err (str "Failed getting latest sha -> " e))
        (.complete loading "Failing!")))))

(defn generate
  "Validate and generate project. gen-fn has two params signature, insist of project name and directory name"
  [project-name gen-fn]
  (let [{:keys [name dir]} (names project-name)]
    (gen-fn name dir)))
