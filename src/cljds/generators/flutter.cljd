(ns cljds.generators.flutter
  (:require ["dart:io" :refer [exit Process]]
            [cljds.generators.core :as cgen]
            [cljds.utils.io :as io]
            [cljds.consts :refer [flutter-docs-url]]
            [clojure.string :as string]
            [cljds.templates :refer [flutter-edn-tpl flutter-main-tpl]]
            [cljds.utils.std :refer [>> !!]]))

(defn- make-files [sha dir-name namespace]
  (let [dir       (await (io/mkdir dir-name))]
    (>> (str "Creating \"" (.-path dir) "\" project"))

    ;; initialize deps.edn
    (let [edn-file  (await (io/mkfile (str dir-name "/deps.edn")))
          content   (-> flutter-edn-tpl
                        (string/replace #"CLJD_SHA" sha)
                        (string/replace #"NAMESPACE" namespace))]
      (await (.writeAsString edn-file content)))

    ;; add main file
    (let [main-file (await
                     (io/mkfile (str dir-name "/src/" dir-name "/core.cljd") :recursive true))
          content   (string/replace flutter-main-tpl #"NAMESPACE" namespace)]
      (await (.writeAsString main-file content)))

    ;; clj -M -m cljd.build init --dart namespace
    (>> (str "Running clj -M:cljd init " namespace))

    (let [result (await
                  (.run Process "clj" ["-M:cljd" "init"] .workingDirectory dir-name))]
      (>> (.-stdout result))
      (!! (.-stderr result)))

    ;; creating src dirs
    (await (io/mkdir (str dir-name "/src/" dir-name) :recursive true))))

(defn- flutter-gen
  "Generate flutter project -> https://github.com/Tensegritics/ClojureDart/blob/main/doc/flutter-quick-start.md"
  [name dir-name]
  (let [namespace      (str name ".core")
        sha            (await (cgen/latest-sha))]
    (await (make-files sha dir-name namespace))
    (>> (str "Project " namespace " created successfully! \n"))
    (>>
     (str "To run \n\n$ cd " dir-name " && clj -M:cljd flutter\n"))
    (>> (str "Read more " flutter-docs-url))
    (exit 0)))

(defn generate [name]
  (cgen/generate name flutter-gen))