(ns cljds.generators.dart
    (:require
      ["dart:io" :refer [exit Process]]
      [cljds.consts :refer [dart-docs-url]]
      [cljds.utils.io :as io]
      [clojure.string :as string]
      [cljds.templates :refer [dart-edn-tpl dart-main-tpl]]
      [cljds.utils.std :refer [out err]]
      [cljds.generators.core :as cgen]))

(defn- make-files [sha dir-name namespace]
       (let [dir (await (io/mkdir dir-name))]
            (out (str "Creating \"" (.-path dir) "\" project"))

            ;; initialize deps.edn
            (let [edn-file (await (io/mkfile (str dir-name "/deps.edn")))
                  content (-> dart-edn-tpl
                              (string/replace #"CLJD_SHA" sha)
                              (string/replace #"NAMESPACE" namespace))]
                 (await (.writeAsString edn-file content)))

            ;; add main file
            (let [main-file (await
                              (io/mkfile (str dir-name "/src/" dir-name "/core.cljd") :recursive true))
                  content (string/replace dart-main-tpl #"NAMESPACE" namespace)]
                 (await (.writeAsString main-file content)))

            ;; clj -M -m cljd.build init --dart namespace
            (out (str "Running clj -M:cljd init " namespace))

            (let [result (await
                           (.run Process "clj" ["-M:cljd" "init" namespace] .workingDirectory dir-name))]
                 (out (.-stdout result))
                 (err (.-stderr result)))

            ;; creating src dirs
            (await (io/mkdir (str dir-name "/src/" dir-name) :recursive true))))

(defn- dart-gen
       "Generate plain-dart project -> https://github.com/Tensegritics/ClojureDart/blob/main/doc/quick-start.md"
       [name dir-name]
       (let [namespace (str name ".core")
             sha (await (cgen/latest-sha))]
            (await (make-files sha dir-name namespace))
            (out (str "Project " namespace " created successfully! \n"))
            (out
              (str "To run \n\n$ cd " dir-name " && clj -M -m cljd.build compile && dart run bin/" dir-name ".dart" "\n"))
            (out (str "Read more " dart-docs-url))
            (exit 0)))

(defn generate [name]
      (cgen/generate name dart-gen))
