(ns cljds.generators.dart
    (:require
      ["dart:io" :refer [exit Process]]
      [cljds.consts :refer [dart-docs-url]]
      [cljds.utils.io :as io]
      [clojure.string :as string]
      [cljds.templates :refer [dart-edn-tpl dart-main-tpl]]
      [cljds.utils.log :refer [info err logger detail]]
      [cljds.generators.core :as cgen]))

(defn- make-files [sha dir-name namespace]
       (let [dir (await (io/mkdir dir-name))]
            (let [loading (.progress logger (str "Creating '" (.-path dir) "' project"))]
                 ;; initialize deps.edn
                 (let [edn-file (await (io/mkfile (str dir-name "/deps.edn")))
                       content (-> dart-edn-tpl
                                   (string/replace #"CLJD_SHA" sha)
                                   (string/replace #"NAMESPACE" namespace))]
                      (await (.writeAsString edn-file content)))

                 (.complete loading (str "Project '" (.-path dir) "' created!")))

            (let [loading (.progress logger (str "Making core file project"))
                  path (str dir-name "/src/" dir-name "/core.cljd")
                  main-file (await (io/mkfile path :recursive true))
                  content (string/replace dart-main-tpl #"NAMESPACE" namespace)]
                 ;; add main file
                 (await (.writeAsString main-file content))
                 (.complete loading (str "Core file '" path "' created!")))


            (let [loading (.progress logger (str "Initializing project"))
                  result (await
                           (.run Process "clj" ["-M:cljd" "init"] .workingDirectory dir-name))]
                 (await (io/mkdir (str dir-name "/src/" dir-name) :recursive true))
                 (.complete loading "Project initialized!")

                 (if (nil? (.-stderr result))
                   (detail (str "\n" (.-stdout result)))
                   (detail (str "\n" (.-stderr result)))))))

(defn- dart-gen
       "Generate plain-dart project -> https://github.com/Tensegritics/ClojureDart/blob/main/doc/quick-start.md"
       [name dir-name]
       (let [namespace (str name ".core")
             sha (await (cgen/latest-sha))]
            (await (make-files sha dir-name namespace))

            (info "To run")
            (info (str "$ cd " dir-name))
            (info "$ clj -M:cljd compile")
            (info (str "$ dart run bin/" dir-name ".dart"))
            (info "")
            (info (str "Read more " dart-docs-url))
            (exit 0)))

(defn generate [name]
      (cgen/generate name dart-gen))
